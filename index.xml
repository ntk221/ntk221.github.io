<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>knittaのブログ</title>
    <link>https://ntk221.github.io/</link>
    <description>Recent content on knittaのブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Dec 2022 06:33:04 +0900</lastBuildDate><atom:link href="https://ntk221.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Test first</title>
      <link>https://ntk221.github.io/posts/test_first/</link>
      <pubDate>Tue, 06 Dec 2022 06:33:04 +0900</pubDate>
      
      <guid>https://ntk221.github.io/posts/test_first/</guid>
      <description>はじめに いろいろあって，かっこいいブログを作ることができたので，早速なんか書いていこうと思います。今回はテストについてです。
テストファースト ソフトウェア開発において，プログラマはソフトウェアの部品となるデータ構造や関数を一つづつ作っていくという作業をします。この時，関数やデータ構造にはそれぞれ期待される役割を持っています。例えば，int abs(int x)という関数は，絶対値を返すという機能を持っていることを期待されます。このような期待される役割を機能要件と呼ぶこともあります。
機能要件が定まっていたとしても，それだけでプログラムを書いていくのは難しいことが多いと思います。ソフトウェアの期待される機能を実現するには，それを複数の部品に分割していく必要もあるでしょう。このような作業はソフトウェアの設計に含まれます。
ソフトウェアの設計が終わって，分割された一つの関数を実装するという段階になってもまだどのように実装すればいいかわからないということがあります 。このような場合にはどうしたら良いでしょうか。
一つの方法として，まずテストを書くということから始めることができます。関数が果たすべき役割がある程度明確になっていれば，その関数が果たす仕事の典型的なケースについては列挙することができるはずだからです。これができないということは，関数の典型的な振る舞いさえも明らかではない，ということであり，もう一度設計の段階に戻って考えることになります。例えば，abs(x)で言うと以下のようなテストを書くことができます。
#include &amp;lt;stdbool.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; int my_abs(int x); void test(void) { bool result = (my_abs(-100) == 100) // -100の絶対値は100と期待される if (result) puts(&amp;#34;ok&amp;#34;); else puts(&amp;#34;ko&amp;#34;); } int main(void) { test(); } では，このコードが書かれたファイルをtest.cという名前で保存して，コンパイルしてみましょう。結果は以下のようになります。
あらまぁ，コンパイルできてないみたいですね。なんででしょうか&amp;hellip;
はい，答えは簡単で，my_absという関数がまだないからですね。test.cにmy_absの実装を追加しましょう。こんな感じでしょうかね。
#include &amp;lt;stdbool.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; int my_abs(int x) { return(-x); } bool result = (my_abs(-100) == 100) // -100の絶対値は100と期待される if (result) puts(&amp;#34;ok&amp;#34;); コンパイルして，実行してみます。
わーい，okだ！
okじゃない しかし，absの典型的な場合とは他にもあります。入力が正の整数の時には，absは，その数をそのまま返さなくてはなりません。この振る舞いについてもテストしましょう。
#include &amp;lt;stdbool.h&amp;gt; #include &amp;lt;stdio.</description>
    </item>
    
  </channel>
</rss>
